# 实现任务，随机生成100组SCF，计算达到稳定的平均最短时间

"""
    1.
    SCF是形如这样一段序列， [2,3,4,8,1,2,4,1,1,1,5,3,5,2]
    功能：随机生成一组SCF
    输入：SCF长度: SCF_length, 是一个整数; 每一个值的取值range，[x,y],x表示下限，y表示上限；生成组数SCF_number,是一个整数
    输出：SCF_lists,一个列表，列表中每一个元素是长度为SCF_length 的随机SCF，共有SCF_number个这样的元素

"""

"""
    2.
    功能：判断遍历result_list中的元素result_list[i]中的元素是否全部属于fix_points, 输出符合这个条件的最小i
    输入：1.列表result_list：形如[[1,2,3,4],[2,3,1,3]] 2.列表fix_points: 形如[1，2]

    输出：一个整数i


"""


from itertools import product
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


def generate_random_SCF(SCF_length, value_range, SCF_number):
    """
    随机生成一组SCF序列

    参数:
    SCF_length (int): SCF长度
    value_range (tuple): SCF取值范围 (x, y)
    SCF_number (int): SCF组数

    返回:
    list: 包含SCF_number个随机SCF的列表
    """
    x, y = value_range
    SCF_lists = [np.random.randint(x, y + 1, SCF_length).tolist() for _ in range(SCF_number)]
    return SCF_lists

# 2. 判断达到稳定的最短时间

def get_stable_index(result_list, fix_points):
    """
    判断result_list中第一个所有元素都属于fix_points的索引

    参数:
    result_list (list): 例如[[1,2,3,4],[2,3,1,3]]
    fix_points (list): 例如[1,2]

    返回:
    int: 最小索引i
    """
    for i, sublist in enumerate(result_list):
        if all(elem in fix_points for elem in sublist):
            return i
    return len(result_list)  # 若没有稳定，返回result_list的长度

def list_to_logical_matrix(lst):
    """将形如 [2,3,1,4] 的列表转换为 n×n 逻辑矩阵"""
    n = len(lst)
    matrix = np.zeros((n, n), dtype=int)
    for col, row in enumerate(lst):
        matrix[row - 1, col] = 1  # 由于索引从1开始，需要-1调整
    return matrix

def lists_to_logical_matrices(lst):
    """将多个逻辑矩阵的列表[[1,2,3,4],[1,2,1,1]] """
    matrices=[]
    for list in lst:
        matrices.append(list_to_logical_matrix(list))
    return matrices

def logic_matrix_to_list(matrix):
    """
    将逻辑矩阵（每一列只有一个元素为1，其余为0）转换为列表形式。

    参数:
    matrix (numpy.ndarray): 输入的逻辑矩阵。

    返回:
    list: 列表形式表示逻辑矩阵，每个元素表示对应列中1所在的行索引。
    """
    return [int(np.where(matrix[:, col] == 1)[0][0])+1 for col in range(matrix.shape[1])]

def multiply_matrices(matrices, index_list):

    """
    根据给定的矩阵列表和索引列表，进行连续的右乘操作，
    输出一个列表，记录每一次的结果矩阵。

    参数:
    matrices (list): 包含多个矩阵（numpy数组）的列表。
    index_list (list): 一个整数列表，表示从matrices中选取矩阵的索引顺序。

    返回:
    list: 每一次乘法的结果矩阵列表。
    """
    results = []
    current_matrix = matrices[index_list[0]-1]
    results.append(current_matrix)

    for idx in index_list[1:]:
        current_matrix = np.dot(matrices[idx-1],current_matrix)
        results.append(current_matrix)

    return results


"""

利用上面函数
将一个已知的lists通过lists_to_logical_matrices生成matrices
对于1生成的SCF_lists, 对其中的每一个SCF：
    multiplied_matrices = multiply_matrices(matrices,SCF)
    for matrix in multiplied_matrices:
        result_list.append(logic_matrix_to_list(matrix))
    使用2得到一个整数
    记录这个整数到列表T[i]
计算T中所有元素的平均值

"""
# 完整任务实现
def compute_average_stabilization_time(matrices_lists, SCF_length, value_range, SCF_number, fix_points):
    SCF_lists = generate_random_SCF(SCF_length, value_range, SCF_number)
    T = []
    matrices = lists_to_logical_matrices(matrices_lists)

    for SCF in SCF_lists:
        multiplied_matrices = multiply_matrices(matrices, SCF)
        result_list = []
        for matrix in multiplied_matrices:
            result_list.append(logic_matrix_to_list(matrix))

        stable_index = get_stable_index(result_list, fix_points)
        T.append(stable_index)

    average_stabilization_time = np.mean(T)
    return average_stabilization_time, T


# matrices_lists = [[41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 42, 48, 42, 48, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 38, 40, 38, 40, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144], [5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 6, 12, 6, 12, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 2, 4, 2, 4, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144]]
matrices_lists = [
[1, 23, 1, 23, 25, 31, 25, 31, 1, 23, 1, 23, 26, 32, 26, 32, 37, 55, 37, 55, 62, 64, 62, 64, 38, 56, 38, 56, 62, 64, 62, 64, 1, 23, 1, 23, 26, 32, 26, 32, 2, 24, 2, 24, 26, 32, 26, 32, 38, 56, 38, 56, 62, 64, 62, 64, 38, 56, 38, 56, 62, 64, 62, 64],
[1, 24, 1, 24, 25, 32, 25, 32, 1, 24, 1, 24, 25, 32, 25, 32, 37, 56, 37, 56, 61, 64, 61, 64, 37, 56, 37, 56, 61, 64, 61, 64, 1, 24, 1, 24, 25, 32, 25, 32, 1, 24, 1, 24, 25, 32, 25, 32, 37, 56, 37, 56, 61, 64, 61, 64, 37, 56, 37, 56, 61, 64, 61, 64],
[1, 19, 1, 19, 29, 31, 29, 31, 1, 19, 1, 19, 30, 32, 30, 32, 33, 51, 33, 51, 62, 64, 62, 64, 34, 52, 34, 52, 62, 64, 62, 64, 1, 19, 1, 19, 30, 32, 30, 32, 2, 20, 2, 20, 30, 32, 30, 32, 34, 52, 34, 52, 62, 64, 62, 64, 34, 52, 34, 52, 62, 64, 62, 64],
[1, 20, 1, 20, 29, 32, 29, 32, 1, 20, 1, 20, 29, 32, 29, 32, 33, 52, 33, 52, 61, 64, 61, 64, 33, 52, 33, 52, 61, 64, 61, 64, 1, 20, 1, 20, 29, 32, 29, 32, 1, 20, 1, 20, 29, 32, 29, 32, 33, 52, 33, 52, 61, 64, 61, 64, 33, 52, 33, 52, 61, 64, 61, 64],
[1, 7, 1, 7, 9, 15, 9, 15, 1, 7, 1, 7, 10, 16, 10, 16, 53, 55, 53, 55, 62, 64, 62, 64, 54, 56, 54, 56, 62, 64, 62, 64, 1, 7, 1, 7, 10, 16, 10, 16, 2, 8, 2, 8, 10, 16, 10, 16, 54, 56, 54, 56, 62, 64, 62, 64, 54, 56, 54, 56, 62, 64, 62, 64],
[1, 8, 1, 8, 9, 16, 9, 16, 1, 8, 1, 8, 9, 16, 9, 16, 53, 56, 53, 56, 61, 64, 61, 64, 53, 56, 53, 56, 61, 64, 61, 64, 1, 8, 1, 8, 9, 16, 9, 16, 1, 8, 1, 8, 9, 16, 9, 16, 53, 56, 53, 56, 61, 64, 61, 64, 53, 56, 53, 56, 61, 64, 61, 64],
[1, 3, 1, 3, 13, 15, 13, 15, 1, 3, 1, 3, 14, 16, 14, 16, 49, 51, 49, 51, 62, 64, 62, 64, 50, 52, 50, 52, 62, 64, 62, 64, 1, 3, 1, 3, 14, 16, 14, 16, 2, 4, 2, 4, 14, 16, 14, 16, 50, 52, 50, 52, 62, 64, 62, 64, 50, 52, 50, 52, 62, 64, 62, 64],
[1, 4, 1, 4, 13, 16, 13, 16, 1, 4, 1, 4, 13, 16, 13, 16, 49, 52, 49, 52, 61, 64, 61, 64, 49, 52, 49, 52, 61, 64, 61, 64, 1, 4, 1, 4, 13, 16, 13, 16, 1, 4, 1, 4, 13, 16, 13, 16, 49, 52, 49, 52, 61, 64, 61, 64, 49, 52, 49, 52, 61, 64, 61, 64]
]
SCF_length = 20
value_range = (1, 8)
SCF_number = 100
#fix_points = [109]
fix_points = [1,64]

avg_time, all_times = compute_average_stabilization_time(
    matrices_lists, SCF_length, value_range, SCF_number, fix_points
)

print(f"达到稳定点的平均最短时间: {avg_time}")


# 144个状态 平均最短时间 7.58 最长时间 无穷
# 64个状态 平均最短时间 5.78  最长时间 无穷
