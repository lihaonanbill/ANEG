from itertools import product
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def list_to_logical_matrix(lst):
    """将形如 [2,3,1,4] 的列表转换为 n×n 逻辑矩阵"""
    n = len(lst)
    matrix = np.zeros((n, n), dtype=int)
    for col, row in enumerate(lst):
        matrix[row - 1, col] = 1  # 由于索引从1开始，需要-1调整
    return matrix

def lists_to_logical_matrices(lst):
    """将多个逻辑矩阵的列表[[1,2,3,4],[1,2,1,1]] """
    matrices=[]
    for list in lst:
        matrices.append(list_to_logical_matrix(list))
    return matrices

def logic_matrix_to_list(matrix):
    """
    将逻辑矩阵（每一列只有一个元素为1，其余为0）转换为列表形式。

    参数:
    matrix (numpy.ndarray): 输入的逻辑矩阵。

    返回:
    list: 列表形式表示逻辑矩阵，每个元素表示对应列中1所在的行索引。
    """
    return [int(np.where(matrix[:, col] == 1)[0][0])+1 for col in range(matrix.shape[1])]

def multiply_matrices(matrices, index_list):
    """
    根据给定的矩阵列表和索引列表，进行连续的右乘操作，
    输出一个列表，记录每一次的结果矩阵。

    参数:
    matrices (list): 包含多个矩阵（numpy数组）的列表。
    index_list (list): 一个整数列表，表示从matrices中选取矩阵的索引顺序。

    返回:
    list: 每一次乘法的结果矩阵列表。
    """
    results = []
    current_matrix = matrices[index_list[0]-1]
    results.append(current_matrix)

    for idx in index_list[1:]:
        current_matrix = np.dot(matrices[idx-1],current_matrix)
        results.append(current_matrix)

    return results

def plot_connected_lines_with_indices(x, indices):
    """
    输入列表x，其中每个元素x[i]也是一个列表，
    x[i]中的元素表示纵坐标，横坐标为其在x中的索引i。
    将x中每个元素中指定索引位置的纵坐标连接起来。

    参数:
    x (list of lists): 输入列表。
    indices (list): 指定需要绘制的纵坐标索引列表。

    输出:
    显示X-Y坐标图。
    """
    if not x:
        raise ValueError("输入列表不能为空")

    # 检查所有子列表长度是否足够长
    max_index = max(indices)
    for sublist in x:
        if len(sublist) <= max_index:
            raise ValueError("子列表长度不足以覆盖所有指定索引")

    # 设置全局字体为Times New Roman
    plt.rc('font', family='Times New Roman', size=16)
    
    # 绘制指定索引的折线图
    for line_idx in indices:
        y_values = [sublist[line_idx] for sublist in x]
        # plt.plot(range(len(x)), y_values, marker='o', label=f'Line {line_idx + 1}')
        plt.plot(range(len(x)), y_values, marker='o', label=f'state {line_idx + 1}')

    # 设置坐标轴标签和标题，并指定字体
    plt.xlabel('Time', fontname='Times New Roman', fontsize=16)
    plt.ylabel('State in the augmented system', fontname='Times New Roman', fontsize=16)
    plt.title('State trajectory', fontname='Times New Roman', fontsize=16)
    plt.legend(fontsize=16)
    plt.grid(True)
    plt.show()


def plot_connected_lines(x):
    """
    输入列表x，其中每个元素x[i]也是一个列表，
    x[i]中的元素表示纵坐标，横坐标为其在x中的索引i。
    将x中每个元素中位置相同的纵坐标连接起来。

    参数:
    x (list of lists): 输入列表。

    输出:
    显示X-Y坐标图。
    """
    if not x:
        raise ValueError("输入列表不能为空")

    num_lines = len(x[0])

    # 检查所有子列表长度是否相同
    for sublist in x:
        if len(sublist) != num_lines:
            raise ValueError("所有子列表必须长度相同")

    # 绘制连接的折线图
    for line_idx in range(num_lines):
        y_values = [sublist[line_idx] for sublist in x]
        print(y_values)
        # plt.plot(range(len(x)), y_values, marker='o', label=f'Line {line_idx + 1}')
        plt.plot(range(len(x)), y_values, marker='o')
    plt.xlabel('Time')
    plt.ylabel('State in the augmented system')
    plt.title('State trajectory')
    plt.legend()
    plt.grid(True)
    plt.show()



def export_to_excel(data, filename="output.xlsx"):
    """
    将列表数据导出到Excel文件。

    参数:
    data (list of lists): 要导出的数据。
    filename (str): Excel文件名。
    """
    df = pd.DataFrame(data)
    df.to_excel(filename, index=False)


def plot_nodes(y_lists, start_x=-1):
    """
    将多个节点的y坐标变化画在坐标中并连线，x坐标从start_x开始。

    参数:
    y_lists (list of lists): 包含每个节点的y坐标变化。
    start_x (int): x坐标的起始值，默认为-1。

    输出:
    显示X-Y坐标图。
    """
    num_points = len(y_lists[0])
    x_values = list(range(start_x, start_x + num_points))

    plt.rc('font', family='Times New Roman', size=16)  # 设置全局字体为Times New Roman

    for idx, y_values in enumerate(y_lists):
        plt.plot(x_values, y_values, marker='o', label=f'player {idx + 1}')

    plt.xlabel('Time', fontname='Times New Roman', fontsize=16)
    plt.ylabel('Strategy', fontname='Times New Roman', fontsize=16)
    plt.title('Strategy trajectory', fontname='Times New Roman', fontsize=16)
    plt.legend(fontsize=16)
    plt.grid(True)
    plt.show()


# 示例用法:
if __name__ == "__main__":
    node1 = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    node2 = [1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    node3 = [2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]

    plot_nodes([node1, node2, node3], start_x=-1)


lists = [[41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 42, 48, 42, 48, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 38, 40, 38, 40, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144], [5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 6, 12, 6, 12, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 2, 4, 2, 4, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144]]



# SCF = [1,1,1,1,1,1,1,1,1,1] # 这是实际序号
SCF = [2,3,4,8,1,2,4,1,1,1,5,3,5,2]
# SCF = [2,3,4,8,1,2,8,8,8,8,8,8,8,8]
# SCF = [2,3]

matrices = lists_to_logical_matrices(lists)
multiplied_matrices = multiply_matrices(matrices,SCF)
result_list = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144]]

for matrix in multiplied_matrices:
    result_list.append(logic_matrix_to_list(matrix))

print(result_list)


# plot_connected_lines(result_list)
plot_connected_lines_with_indices(result_list,[2,17,46,66,108,134]) # 这里输入的是实际值-1# 
# plot_connected_lines_with_indices(result_list,[0,2,8,13,26,63]) # 这里输入的是实际值-1
# plot_connected_lines_with_indices(result_list,[2])

# trajectory_of_certain_state = []
# for x in result_list:
#     trajectory_of_certain_state.append(x[2]) # 这里输入实际索引值-1
# print(trajectory_of_certain_state)

# [2,3,4,8,1,2,4,1,1,1,5,3,5,2]
# [3, 41, 126, 128, 128, 124, 112, 112, 111, 109, 109, 109, 109, 109, 109]
# 选择初始state = 3
# [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
# [1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1]
# [2,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1]



# [67, 121, 110, 112, 112, 111, 109, 109, 109, 109, 109, 109, 109, 109, 109]
# export_to_excel(result_list, "example_data.xlsx")
# export_to_excel(lists, "blocks.xlsx")






#[[41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 42, 48, 42, 48, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 38, 40, 38, 40, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144], [5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 6, 12, 6, 12, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135], [5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136], [1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 2, 4, 2, 4, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143], [1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144]]







# 'C(1)(2)': np.array([[ 0, 6, 0], [9,  7,  5]]),
    # 'C(1)(3)': np.array([[4, 3], [6, 8]]),
    # 'C(2)(1)': np.array([[  1,  9], [10,   8], [  4,  3]]),
    # 'C(2)(3)': np.array([[5, 7], [1,  3], [ 6, 9]]),
    # 'C(3)(1)': np.array([[ 8, 2], [ 3,  0]]),
    # 'C(3)(2)': np.array([[  7,  1, 10], [  6,   9,   1]])


#[41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 41, 47, 41, 47, 54, 60, 54, 60, 65, 71, 65, 71, 42, 48, 42, 48, 54, 60, 54, 60, 65, 71, 65, 71, 41, 47, 41, 47, 53, 59, 53, 59, 65, 71, 65, 71, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135]
#[41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 41, 48, 41, 48, 53, 60, 53, 60, 65, 72, 65, 72, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136]
#[37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 37, 39, 37, 39, 54, 56, 54, 56, 69, 71, 69, 71, 38, 40, 38, 40, 54, 56, 54, 56, 69, 71, 69, 71, 37, 39, 37, 39, 53, 55, 53, 55, 69, 71, 69, 71, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143]
#[37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 37, 40, 37, 40, 53, 56, 53, 56, 69, 72, 69, 72, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144]
# [5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135, 5, 11, 5, 11, 18, 24, 18, 24, 29, 35, 29, 35, 6, 12, 6, 12, 18, 24, 18, 24, 29, 35, 29, 35, 5, 11, 5, 11, 17, 23, 17, 23, 29, 35, 29, 35, 109, 111, 109, 111, 122, 124, 122, 124, 133, 135, 133, 135, 110, 112, 110, 112, 122, 124, 122, 124, 133, 135, 133, 135, 109, 111, 109, 111, 121, 123, 121, 123, 133, 135, 133, 135]
# [5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 5, 12, 5, 12, 17, 24, 17, 24, 29, 36, 29, 36, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136, 109, 112, 109, 112, 121, 124, 121, 124, 133, 136, 133, 136]
# [1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143, 1, 3, 1, 3, 18, 20, 18, 20, 33, 35, 33, 35, 2, 4, 2, 4, 18, 20, 18, 20, 33, 35, 33, 35, 1, 3, 1, 3, 17, 19, 17, 19, 33, 35, 33, 35, 109, 111, 109, 111, 126, 128, 126, 128, 141, 143, 141, 143, 110, 112, 110, 112, 126, 128, 126, 128, 141, 143, 141, 143, 109, 111, 109, 111, 125, 127, 125, 127, 141, 143, 141, 143]
# [1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 1, 4, 1, 4, 17, 20, 17, 20, 33, 36, 33, 36, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144, 109, 112, 109, 112, 125, 128, 125, 128, 141, 144, 141, 144]

#[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144]]






# 'C(1)(2)': np.array([[ 4, 4], [0, 10]]),
#     'C(1)(3)': np.array([[ 4, 4], [0, 10]]),
#     'C(2)(1)': np.array([[ 4, 4], [0, 10]]),
#     'C(2)(3)': np.array([[ 4, 4], [0, 10]]),
#     'C(3)(1)': np.array([[ 4, 4], [0, 10]]),
#     'C(3)(2)': np.array([[ 4, 4], [0, 10]])

# [
# [1, 23, 1, 23, 25, 31, 25, 31, 1, 23, 1, 23, 26, 32, 26, 32, 37, 55, 37, 55, 62, 64, 62, 64, 38, 56, 38, 56, 62, 64, 62, 64, 1, 23, 1, 23, 26, 32, 26, 32, 2, 24, 2, 24, 26, 32, 26, 32, 38, 56, 38, 56, 62, 64, 62, 64, 38, 56, 38, 56, 62, 64, 62, 64],
# [1, 24, 1, 24, 25, 32, 25, 32, 1, 24, 1, 24, 25, 32, 25, 32, 37, 56, 37, 56, 61, 64, 61, 64, 37, 56, 37, 56, 61, 64, 61, 64, 1, 24, 1, 24, 25, 32, 25, 32, 1, 24, 1, 24, 25, 32, 25, 32, 37, 56, 37, 56, 61, 64, 61, 64, 37, 56, 37, 56, 61, 64, 61, 64],
# [1, 19, 1, 19, 29, 31, 29, 31, 1, 19, 1, 19, 30, 32, 30, 32, 33, 51, 33, 51, 62, 64, 62, 64, 34, 52, 34, 52, 62, 64, 62, 64, 1, 19, 1, 19, 30, 32, 30, 32, 2, 20, 2, 20, 30, 32, 30, 32, 34, 52, 34, 52, 62, 64, 62, 64, 34, 52, 34, 52, 62, 64, 62, 64],
# [1, 20, 1, 20, 29, 32, 29, 32, 1, 20, 1, 20, 29, 32, 29, 32, 33, 52, 33, 52, 61, 64, 61, 64, 33, 52, 33, 52, 61, 64, 61, 64, 1, 20, 1, 20, 29, 32, 29, 32, 1, 20, 1, 20, 29, 32, 29, 32, 33, 52, 33, 52, 61, 64, 61, 64, 33, 52, 33, 52, 61, 64, 61, 64],
# [1, 7, 1, 7, 9, 15, 9, 15, 1, 7, 1, 7, 10, 16, 10, 16, 53, 55, 53, 55, 62, 64, 62, 64, 54, 56, 54, 56, 62, 64, 62, 64, 1, 7, 1, 7, 10, 16, 10, 16, 2, 8, 2, 8, 10, 16, 10, 16, 54, 56, 54, 56, 62, 64, 62, 64, 54, 56, 54, 56, 62, 64, 62, 64],
# [1, 8, 1, 8, 9, 16, 9, 16, 1, 8, 1, 8, 9, 16, 9, 16, 53, 56, 53, 56, 61, 64, 61, 64, 53, 56, 53, 56, 61, 64, 61, 64, 1, 8, 1, 8, 9, 16, 9, 16, 1, 8, 1, 8, 9, 16, 9, 16, 53, 56, 53, 56, 61, 64, 61, 64, 53, 56, 53, 56, 61, 64, 61, 64],
# [1, 3, 1, 3, 13, 15, 13, 15, 1, 3, 1, 3, 14, 16, 14, 16, 49, 51, 49, 51, 62, 64, 62, 64, 50, 52, 50, 52, 62, 64, 62, 64, 1, 3, 1, 3, 14, 16, 14, 16, 2, 4, 2, 4, 14, 16, 14, 16, 50, 52, 50, 52, 62, 64, 62, 64, 50, 52, 50, 52, 62, 64, 62, 64],
# [1, 4, 1, 4, 13, 16, 13, 16, 1, 4, 1, 4, 13, 16, 13, 16, 49, 52, 49, 52, 61, 64, 61, 64, 49, 52, 49, 52, 61, 64, 61, 64, 1, 4, 1, 4, 13, 16, 13, 16, 1, 4, 1, 4, 13, 16, 13, 16, 49, 52, 49, 52, 61, 64, 61, 64, 49, 52, 49, 52, 61, 64, 61, 64]
# ]

# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]